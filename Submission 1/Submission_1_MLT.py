# -*- coding: utf-8 -*-
"""Submission 1 MLT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T-Y_O5r4cH_5y21vgnCY3m2EmKXbYqQ7

# Predictive Analytics : Prediksi Harga Rumah di Kota Bandung

# Data Loading
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import ShuffleSplit
# %matplotlib inline

!gdown 1LFVmlsGF-nmAD0KDXA72xspYoUu9_-Ae

data_rumah = pd.read_excel('/content/data_rumah.xlsx')
data_rumah

data_rumah = data_rumah.drop(['Unnamed: 0', 'judul', 'deskripsi'], axis = 'columns')

"""# Exploratory Data Analysis

## Deskripsi Variabel
"""

data_rumah.info()

data_rumah.describe()

"""## Menangani Missing Value"""

data_rumah.isnull().sum()

kamar = (data_rumah.kamar == 0).sum()
bangunan = (data_rumah.bangunan == 0).sum()
lahan = (data_rumah.lahan == 0).sum()

print('Nilai 0 di kolom kamar ada: ', kamar)
print('Nilai 0 di kolom bangunan ada: ', bangunan)
print('Nilai 0 di kolom lahan ada: ', lahan)

data_rumah.loc[(data_rumah['kamar'] == 0)]

data_rumah = data_rumah.loc[(data_rumah[['kamar', 'bangunan', 'lahan']] != 0).all(axis = 1)]

data_rumah.shape

data_rumah.describe()

"""## Menangani Outliers"""

sns.boxplot(x = data_rumah['kamar'])

sns.boxplot(x = data_rumah['bangunan'])

sns.boxplot(x = data_rumah['lahan'])

Q1 = data_rumah.quantile(0.25)
Q3 = data_rumah.quantile(0.75)
IQR = Q3 - Q1
data_rumah = data_rumah[~((data_rumah < (Q1 - 1.5 * IQR))|(data_rumah > (Q3 + 1.5 * IQR))).any(axis = 1)]
 
data_rumah.shape

"""## Univariate Analysis"""

numerical_features = ['kamar', 'bangunan', 'lahan', 'harga']
categorical_features = ['alamat']

"""### Categorical Features

#### Fitur Alamat
"""

feature = categorical_features[0]
count = data_rumah[feature].value_counts()
percent = 100 * data_rumah[feature].value_counts(normalize = True)
df = pd.DataFrame({'jumlah sampel' : count, 'persentase' : percent.round(1)})
print(df)
count.plot(kind = 'bar', title = feature);

"""### Numerical Features"""

data_rumah.hist(bins = 50, figsize = (20, 15))
plt.show()

"""## Multivariate Analysis

### Categorical Features
"""

cat_features = data_rumah.select_dtypes(include = 'object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x = col, y = 'harga', kind = 'bar', dodge = False, height = 4, aspect = 3,  data = data_rumah, palette = 'Set3')
  plt.title('Rata-rata \'harga\' Relatif terhadap - {}'.format(col))

"""### Numerical Features"""

sns.pairplot(data_rumah, diag_kind = 'kde')

plt.figure(figsize = (10, 8))
correlation_matrix = data_rumah.corr().round(2)
 
sns.heatmap(data = correlation_matrix, annot = True, cmap = 'coolwarm', linewidths = 0.5)
plt.title('Correlation Matrix untuk Fitur Numerik', size = 20)

"""# Data Preparation

## Encoding Fitur Kategori
"""

data_rumah = pd.concat([data_rumah, pd.get_dummies(data_rumah['alamat'], prefix = 'alamat')], axis = 1)
data_rumah.drop(['alamat'], axis = 1, inplace = True)
data_rumah.head()

"""## Train-Test-Split"""

X = data_rumah.drop(['harga'], axis = 1)
y = data_rumah['harga']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.05, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## Standarisasi"""

numerical_features = ['kamar', 'lahan', 'bangunan']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""# Model Development

## Grid Search
"""

def grid_search_model(X, y):
    algoritma = {
        'knn': {
            'model': KNeighborsRegressor(),
            'params': {
                'n_neighbors': [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            }
        },
        'random_forest': {
            'model': RandomForestRegressor(),
            'params': {
                'n_estimators': [25, 50, 75, 100],
                'max_depth' : [8, 16, 32, 64],
                'random_state': [11, 33, 55, 77],
            }
        },
        'boosting': {
            'model': AdaBoostRegressor(),
            'params': {
                'learning_rate' : [0.1, 0.05, 0.01, 0.05, 0.001],
                'n_estimators': [25, 50, 75, 100],
                'random_state': [11, 33, 55, 77]
            }
        }
    }

    scores = []
    cv = ShuffleSplit(n_splits = 5, test_size = 0.05, random_state = 123)
    for algo_name, config in algoritma.items():
        gs = GridSearchCV(config['model'], config['params'], cv = cv, return_train_score = False)
        gs.fit(X, y)
        scores.append({
            'model': algo_name,
            'best_score': gs.best_score_,
            'best_params': gs.best_params_
        })

    return pd.DataFrame(scores, columns = ['model', 'best_score', 'best_params'])

grid_search_model(X, y)

"""## Model with Best Parameter from Grid Search"""

accuracy = pd.DataFrame(index = ['accuracy'])

knn = KNeighborsRegressor(n_neighbors = 15)
knn.fit(X_train, y_train)
accuracy.loc['accuracy', 'knn'] = knn.score(X_test, y_test)
knn.score(X_test, y_test)

rf = RandomForestRegressor(n_estimators = 50, max_depth = 32, random_state = 33)
rf.fit(X_train, y_train)
accuracy.loc['accuracy', 'rf'] = rf.score(X_test, y_test)
rf.score(X_test, y_test)

boosting = AdaBoostRegressor(n_estimators = 25, learning_rate = 0.1, random_state = 55)                             
boosting.fit(X_train, y_train)
accuracy.loc['accuracy', 'boosting'] = boosting.score(X_test, y_test)
boosting.score(X_test, y_test)

"""# Evaluasi Model"""

accuracy

mse = pd.DataFrame(columns = ['train', 'test'], index = ['KNN', 'RF', 'Boosting'])

model_dict = {
    'KNN': knn, 'RF': rf, 'Boosting': boosting,
    }

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true = y_train, y_pred = model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true = y_test, y_pred = model.predict(X_test))/1e3

mse

fig, ax = plt.subplots()
mse.sort_values(by = 'test', ascending = False).plot(kind = 'barh', ax = ax, zorder = 3)
ax.grid(zorder = 0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {
    'y_true' : y_test[:1]
    }
for name, model in model_dict.items():
    pred_dict['prediksi_' + name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)